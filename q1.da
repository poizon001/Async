import sys
from random import randint
TIMEOUT = 2

class Proposer(process):
    def setup(acceptors:set):
        self.n = None              # proposal number
        self.pn = None             # proposal number returned by acceptor while preemption 
        self.majority = acceptors  # majority of acceptors; all in other papers

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num

        # Checking if there is any preemption
        if pn != None:
            # If preemption and number sent by acceptor is bigger than what proposer 
            # is currently using for prepare request, acceptor updates it
            if pn[0] > n[0]:
                output("Preemption ***********************", n, "#######################", pn)
                n = (pn[0], self)
                output("~~~~~~~~~~updated~~~~~~~~~", n)
            else:
                output("No preemption")

        output("proposal number n ", n)

        send(('prepare', n), to= majority)
        #output("Sedning prepare request", n)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))

            # sending proposed value to itself for checking correctness
            send(('proposed_value', v), to=nodeof(self))

            send(('accept', n, v), to= responded)
            #output("Sending accept request", n, v)
            debug('### chose', n, v)

        elif timeout(TIMEOUT):
            output('failed proposal number', n)

    def run():
        while not received(('done',)):
            to_consent()
        output('terminating')

    #Method to receive the preemption msg from acceptors with max proposal number
    def receive(msg= ('preempt', n, s)):
        #output("Here I am getting preempt msg with", s)
        if s != None:
            output("GOT====>", s, self)
            pn = s[0]

    def anyof(s):
        return next(iter(s)) if s else None

class Acceptor(process):
    def setup(learners:set): pass

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            send(('respond', n, maxprop), to =p)
            output("Accepted promise request", n)
        else:
            maxprop = anyof(setof((n, v), sent(('respond', n, v)),
                               n==max(setof(n, sent(('respond', n, _))))))
            send(('preempt', n, maxprop), to =p)
            output("Sending preempt to", p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            send(('accepted', n, v), to= learners)
            output("Accepted proposal", n, v)

    def run():
        await(received(('done',)))
        output('terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

class Learner(process):
    def setup(acceptors:set): 
        self.accepted_proposal = None

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            accepted_proposal = (n[1],v)

        elif timeout(TIMEOUT * 10):
            output('failed learning anything')

    def run():
        learn()
        output('terminating')
        send(('learned', ), to=nodeof(self))
        send(('learned_proposal', accepted_proposal), to=nodeof(self))


def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (acceptors,), num= nproposers)
    learners = new(Learner, (acceptors,), num= nlearners)
    for p in acceptors: setup(p, (learners,))
    start(acceptors | proposers | learners)

    await(each(l in learners, has=received(('learned',), from_=l)))

    # Set for storing learned values
    learned_value = set()
    #Count for checking number of learners who have learned chosen value
    count = 0
    # Flag to indicate the correctness
    correct = True

    #For all learners fetching the learned values
    for l in learners:
        learned_value = learned_value | setof(b, received(('learned_proposal', b), from_=l))
        count = count + 1

    # Checking if all learners have learned the same value
    if count != nlearners or len(learned_value) != 1:
        correct = False

    # Checking if only one of the proposed value is learned and not any anything else
    if correct:
        # Set of all proposed values
        proposed_values = set()
        for proposer in proposers:
            proposed_values = proposed_values | setof(v, received(('proposed_value', v), from_=proposer))

        # Checking if only proposed values has been chosen
        k = next(iter(learned_value))
        if k[1] not in proposed_values:
            correct = False

    if correct:
        output("Correctness testing: Passed")
    else:
        output("Correctness testing: Failed")

    output('done')
    send(('done',), to= (acceptors|proposers))

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.

