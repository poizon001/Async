import sys
import random
import time
import q3_2
import orig_q3_2
specifications=[q3_2, orig_q3_2]
import statistics as stat

class PerfEval(process):
    def setup(p,a,l,n,r,d,w,tp,tl):  # s is set of all other processes
        self.p=p
        self.a=a
        self.l=l
        self.n=n
        self.r=r
        self.d=d
        self.w=w
        self.tp=tp
        self.tl=tl

    def performanceTesting():
        codes = {}
        running_time = {}

        for spec in specifications:
            #output("**********************",spec,"***********************")
            codes[spec] = []
            running_time[spec.__name__] = {"learners": l, "acceptors" : a, "proposers": p, "runs": n, "rate": r, "time" : [], "time_c": [], "delay": d, "wait": w, "tp": tp, "tl": tl, "consensus": True}      

            for run in range(n):
                codes[spec].append({"cLearners" : set(), "cProposers": set(), "cAcceptors" : set()})
                output("==============================", spec.__name__, " RUN:", run, "==================================")

                #starting time
                start_time = time.time()
                start_time_c = time.process_time()

                acceptors = new(spec.Acceptor, num= a)
                codes[spec][run]["cAcceptors"] = acceptors

                proposers = new(spec.Proposer, (codes[spec][run]["cAcceptors"],tp,w,r,d), num= p)
                codes[spec][run]["cProposers"] = proposers

                learners = new(spec.Learner, (codes[spec][run]["cAcceptors"],tl,r,d), num= l)
                codes[spec][run]["cLearners"] = learners

                #output("RUN", run, "code --->", codes)

                for pp in codes[spec][run]["cAcceptors"]: setup(pp, (codes[spec][run]["cLearners"],r,d))

                start(codes[spec][run]["cAcceptors"] | codes[spec][run]["cProposers"] | codes[spec][run]["cLearners"])

                consensus_reached = True
                if await(each(ll in codes[spec][run]["cLearners"], has=received(('learning_done', ll, True), from_=ll))):
                    pass
                elif await(each(ll in codes[spec][run]["cLearners"], has=received(('learning_done', ll, False), from_=ll))):
                    consensus_reached = False
                elif timeout(10):
                    consensus_reached = False

                #output("########################Received from learners########################")

                send(('ExecDone',), to= (codes[spec][run]["cAcceptors"]|codes[spec][run]["cProposers"]))

                #end time
                end_time = time.time()
                end_time_c = time.process_time()

                if consensus_reached:
                    elapsed_time = round(end_time - start_time, 4)
                    elapsed_time_c = round(end_time_c - start_time_c, 4)

                    t = running_time[spec.__name__]["time"]
                    running_time[spec.__name__]["time"].append(elapsed_time)

                    tc = running_time[spec.__name__]["time_c"]
                    running_time[spec.__name__]["time_c"].append(elapsed_time_c)
                else:
                    output(spec.__name__, "=======Consensus not reached for run========", run)

                output("############ Send ExecDone to Acceptors and Ppoposors ######### FOR RUN", run)

                #output("File", spec.__name__, "run", run, "elapsed_time", elapsed_time, "elapsed_time_c", elapsed_time_c)
                output(running_time)

        #output("--------RUN TIME ANALYSIS----------")
        #output(running_time)
        displayResult(running_time)

    def displayResult(running_time):
        for key, value in running_time.items():
            time = value["time"]
            time_c = value["time_c"]
            delay = value["delay"]
            wait = value["wait"]
            rate = value["rate"]
            tp = value["tp"]
            tl = value["tl"]

            total_time = 0
            total_time_c = 0

            output("#########################################", key ,"######################################################")
            output("#################################### PERFORMANCE TESTING RESULT #####################################")
            output("################################## DATA FOR MULTIPLE ITERATIONS #####################################")
            run = 1
            output( "{:<10} | {:<10} | {:<10} | {:<10} | {:<10} | {:<10} | {:<10} | {:<10}".format('run', 'delay','wait', 'rate', 'tp', 'tl', 'elapsed_time', 'cpu_time'))
            for a, b in zip(time, time_c):
                output("{:<10} | {:<10} | {:<10} | {:<10} | {:<10} | {:<10} | {:<12} | {:<10}".format(run, delay, wait, rate, tp, tl, a, b))
                run = run + 1
                total_time = total_time + a
                total_time_c = total_time_c + b
            output("#####################################################################################################")

            run = run - 1
            avg_elapsed_time = 0
            avg_cpu_time = 0
            sd_time = 0
            sd_time_c = 0
            if len(time) >= 2:
                sd_time = round(stat.stdev(time), 4)
            if len(time_c) >= 2:
                sd_time_c = round(stat.stdev(time_c), 4)

            if run > 0:
                avg_elapsed_time = round((total_time/run), 4)
                avg_cpu_time = round((total_time_c/run), 4)

            Rtmin = min(time)
            Rtmax = max(time)
            Rtcmin = min(time_c)
            Rtcmax = max(time_c)

            output("#### Elapsed Time (mean -",avg_elapsed_time , "SD -",  sd_time, "Range - [", Rtmin, "-", Rtmax,"] ) #######") 
            output("#### CPU time (mean -",avg_cpu_time, "SD -",  sd_time_c, "Range - [", Rtcmin,"-", Rtcmax, "] ) #######")
            output()
            output()


    def run():
        performanceTesting()
        output("In child", self)
        output('terminating...')
        send(('done', self), to= parent())
        output("Sending done to parent")
        await(received(('done'), from_=parent()))
        output("Awaiting done from parent")
        output("Received done from parent")

def main():
    # p - number of proposers
    p = int(sys.argv[1]) if len(sys.argv) > 3 else 5

    # a - number of acceptors
    a = int(sys.argv[2]) if len(sys.argv) > 3 else 5

    # l - number of learners
    l = int(sys.argv[3]) if len(sys.argv) > 3 else 5

    # n - number of repetitions for each run
    n = int(sys.argv[4]) if len(sys.argv) > 0 else 10

    # r - message loss rate
    r = float(sys.argv[5]) if len(sys.argv) > 1 else 0

    # d - message delay, up to the number of seconds specified
    d = int(sys.argv[6]) if len(sys.argv) > 1 else 0

    # w - wait time, in seconds, before trying a new round
    w = int(sys.argv[7]) if len(sys.argv) > 1 else 0

    # tp - timeout for poposers
    tp = int(sys.argv[8]) if len(sys.argv) > 1 else 2

    # tl - timeout for learners
    tl = int(sys.argv[9]) if len(sys.argv) > 1 else 2

    eval = new(PerfEval, num=1)
    setup(eval,(p,a,l,n,r,d,w,tp,tl))

    start(eval)

    await(each(e in eval, has=received(('done', e))))
    
    send(('done'), to=eval)
    output("Sending done to child")

