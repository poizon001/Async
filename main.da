import sys
import random
import time
import q2
import origq2
codePaths=[q2]

class PerfEval(process):
    def setup(p,a,l,n,r,d,w,tp,tl):  # s is set of all other processes
        self.p=p
        self.a=a
        self.l=l
        self.n=n
        self.r=r
        self.d=d
        self.w=w
        self.tp=tp
        self.tl=tl

    def performanceTesting():
        codes = {}
        for codePath in codePaths:
            output("**********************",codePath,"***********************")
            cLearners = []
            cProposers = []
            cAcceptors = []
            codes[codePath] = {"cLearners" : cLearners, "cProposers": cProposers, "cAcceptors" : cAcceptors}

            for run in range(n):
                output("============================== RUN:", run, "==================================")
                acceptors = new(codePath.Acceptor, num= a)
                codes[codePath]["cAcceptors"] = acceptors

                proposers = new(codePath.Proposer, (codes[codePath]["cAcceptors"],tp,w,r,d), num= p)
                codes[codePath]["cProposers"] = proposers

                learners = new(codePath.Learner, (codes[codePath]["cAcceptors"],tl,r,d), num= l)
                codes[codePath]["cLearners"] = learners

                output(codes)

                for pp in codes[codePath]["cAcceptors"]: setup(pp, (codes[codePath]["cLearners"],r,d))

                start(codes[codePath]["cAcceptors"] | codes[codePath]["cProposers"] | codes[codePath]["cLearners"])
                
                await(each(ll in codes[codePath]["cLearners"], has=received(('learning_done', ll), from_=ll)))

                output("########################Received from learners########################")

                send(('ExecDone',), to= (codes[codePath]["cAcceptors"]|codes[codePath]["cProposers"]))
                output("$$$$$$$$Send ExecDone to AnP $$$$$$$$$$$ FOR RUN", run)

    def run():
        performanceTesting()
        output("In child", self)
        output('terminating...')
        send(('done', self), to= parent())
        output("Sending done to parent")
        await(received(('done'), from_=parent()))
        output("Awaiting done from parent")
        output("Received done from parent")

def main():
    # p - number of proposers
    p = int(sys.argv[1]) if len(sys.argv) > 3 else 5

    # a - number of acceptors
    a = int(sys.argv[2]) if len(sys.argv) > 3 else 5

    # l - number of learners
    l = int(sys.argv[3]) if len(sys.argv) > 3 else 5

    # n - number of repetitions for each run
    n = int(sys.argv[4]) if len(sys.argv) > 0 else 10

    # r - message loss rate
    r = float(sys.argv[5]) if len(sys.argv) > 1 else 0

    # d - message delay, up to the number of seconds specified
    d = int(sys.argv[6]) if len(sys.argv) > 1 else 0

    # w - wait time, in seconds, before trying a new round
    w = int(sys.argv[7]) if len(sys.argv) > 1 else 0

    # tp - timeout for poposers
    tp = int(sys.argv[8]) if len(sys.argv) > 1 else 2

    # tl - timeout for learners
    tl = int(sys.argv[9]) if len(sys.argv) > 1 else 2

    eval = new(PerfEval, num=1)
    setup(eval,(p,a,l,n,r,d,w,tp,tl))

    output("============", n)

    start(eval)

    await(each(e in eval, has=received(('done', e))))
    
    send(('done'), to=eval)
    output("Sending done to child")

