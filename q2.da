import sys
from random import randint
TIMEOUT = 2
import time
import random


class Proposer(process):
    def setup(acceptors:set, tp:int, w:int, r:float):
        output("Wait time  =>" , self.w)
        output("Msg loss rate =>", r)
        self.n = None              # proposal number
        self.pn = None             # proposal number returned by acceptor while preemption 
        self.majority = acceptors  # majority of acceptors; all in other papers

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num

        # Checking if there is any preemption
        output("BEFORE Preemption OLDVAL    ***********************", n)
        if pn != None:
            # If preemption and number sent by acceptor is bigger than what proposer 
            # is currently using for prepare request, acceptor updates it

            output("Preemption OLDVAL    ***********************", n)
            if pn[0] > n[0]:
                n = (pn[0]+1, self)
                output("Preemption NEWVAL    ***********************", n)
            else:
                output("No preemption")

        for m in majority:
            sendMsg(('prepare', n), m)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))

            for res in responded:
                sendMsg(('accept', n, v), res)

            #output("Proposer: Sending accept request", n, v)
            debug('### chose', n, v)

        elif timeout(tp):
            output('TP', tp, 'failed proposal number', n)

    def msgLoss():
        ran = random.uniform(0.0, 1.0)
        output("Inside msg loss ", ran)
        if ran < r:
            return True
        else:
            return False

    def sendMsg(msg, to):
        if msgLoss() == False:
            output("MSGLOSS: Sending", msg, "to", to)
            send(msg, to= to)
        else:
            output("MSGLOSS: Not sending", msg, "to", to)


    def run():
        while not received(('done',)):
            # Wait before starting another prepare request
            if w != 0:
                output("Wait time before sending prepare")
                time.sleep(w)
            to_consent()
        output('terminating')

    #Method to receive the preemption msg from acceptors with max proposal number
    def receive(msg= ('preempt', n, s)):
        if s != None:
            pn = s[0] if pn != None and s[0][0] > pn[0] else s[0]

    def anyof(s):
        return next(iter(s)) if s else None

class Acceptor(process):
    def setup(learners:set, r:float): pass

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))

            sendMsg(('respond', n, maxprop), p)
        else:
            maxprop = anyof(setof((n, v), sent(('respond', n, v)),
                               n==max(setof(n, sent(('respond', n, _))))))

            sendMsg(('preempt', n, maxprop), p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            for l in learners:
                sendMsg(('accepted', n, v), l)

    def run():
        await(received(('done',)))
        output('terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

    def msgLoss():
        ran = random.uniform(0.0, 1.0)
        output("Inside msg loss ", ran)
        if ran < r:
            return True
        else:
            return False

    def sendMsg(msg, to):
        if msgLoss() == False:
            output("MSGLOSS: Sending", msg, "to", to)
            send(msg, to= to)
        else:
            output("MSGLOSS: Not sending", msg, "to", to)


class Learner(process):
    def setup(acceptors:set, tl:int,  r:float): pass

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)

        elif timeout(tl):
            output("TL", tl, 'failed learning anything')

    def run():
        learn()
        output('terminating')
        send(('learned', ), to=nodeof(self))
        #sendMsg(('learned', ), nodeof(self))

    def msgLoss():
        ran = random.uniform(0.0, 1.0)
        output("Inside msg loss ", ran)
        if ran < r:
            return True
        else:
            return False

    def sendMsg(msg, to):
        if msgLoss() == False:
            output("MSGLOSS: Sending", msg, "to", to)
            send(msg, to= to)
        else:
            output("MSGLOSS: Not sending", msg, "to", to)

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (acceptors, 2, 0, 0.2), num= nproposers)
    learners = new(Learner, (acceptors, 10, 0.2,), num= nlearners)
    for p in acceptors: setup(p, (learners, 0.2,))
    start(acceptors | proposers | learners)

    await(each(l in learners, has=received(('learned',), from_=l)))

    output('done')
    send(('done',), to= (acceptors|proposers))


# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.

